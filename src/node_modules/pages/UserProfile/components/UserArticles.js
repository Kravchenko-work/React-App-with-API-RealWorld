import React, {Fragment, useEffect} from "react";
import {useLocation} from "react-router-dom";
import {stringify} from "query-string";

import {getPaginator, limit} from "utils";
import useFetch from "hooks/useFetch";
import Loading from 'components/Loading';
import ErrorMessage from 'components/ErrorMessage';
import Feed from 'components/Feed';
import Pagination from 'components/Pagination';

const getApiUrl = ({username, offset, isFavorites, limit}) => {
    const params = isFavorites ?
        {limit, offset, favorited: username} :
        {limit, offset, author: username};
    return `/articles?${stringify(params)}`;
}

const UserArticles = ({username, isFavorites}) => {
    const location = useLocation();
    const {offset, currentPage} = getPaginator(location.search);

    const apiUrl = getApiUrl({username, offset, isFavorites, limit});
    const [{response, isLoading, error}, doFetch] = useFetch(apiUrl);

    //Костыль, т.к. API не отправляет количество записей или страниц для 
    //формирования номеров страниц в пагинации
    const apiUrlCountArticles = getApiUrl({username, offset: 0, isFavorites, limit: 10000});
    const [{response: responseCountArticles}, doFetchCountArticles] = useFetch(apiUrlCountArticles);

    useEffect(() => {
        doFetchCountArticles();
    }, [doFetchCountArticles])

    useEffect(() => {
        doFetch();
        doFetchCountArticles();
    }, [doFetch, isFavorites, currentPage])
    
    const url = location.pathname;

    return (
        <div>
            {isLoading && <Loading />}
            {error && <ErrorMessage/>}
            {!isLoading && response && responseCountArticles && (
                <Fragment>
                    <Feed articles={response.articles}/>
                    <Pagination
                        total={responseCountArticles.articlesCount}
                        limit={limit}
                        url={url}
                        currentPage={currentPage}
                    />
                </Fragment>
            )}
        </div>
    )
}

export default UserArticles;