import React, {useEffect, useState, useContext} from "react";
import {Navigate, useParams} from "react-router-dom";

import ArticleForm from 'components/ArticleForm';
import useFetch from "hooks/useFetch";

const EditArticle = ({}) => {
    const parms = useParams();
    const slug = parms.slug
    const apiUrl = `/articles/${slug}`;
    const [
        {
            response: responseGetArticle,
            error: errorGetArticle,
            isLoading: isLoadingGetArticle,
        },
        doFetchArticle
    ] = useFetch(apiUrl);
    const [
        {
            response: responseUpdateArticle,
            error: errorUpdateArticle,
        },
        doFetchUpdateArticle
    ] = useFetch(apiUrl);
    const [initialValues, setInitialValues] = useState(null);
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false);

    const handleSubmit = article => {
        console.log('handleSubmit', article)
        doFetchUpdateArticle({
            method: 'put',
            data: {
                article,
            },
        });
    }

    useEffect(() => {
        doFetchArticle();
    }, [doFetchArticle])


    useEffect(() => {
        const response = responseGetArticle;
        if (!response) {
            return;
        }

        setInitialValues({
            title: response.article.title,
            description: response.article.description,
            body: response.article.body,
            tagList: response.article.tagList,
        });
    }, [responseGetArticle])

    useEffect(() => {
        if (!responseUpdateArticle) {
            return;
        }

        setIsSuccessfullSubmit(true);
    }, [responseUpdateArticle])

    if (isSuccessfullSubmit) {
        const slug = responseUpdateArticle?.article?.slug || slug;
        return <Navigate to={`/articles/${slug}`}/>
    }

    if (errorGetArticle) {
        return <Navigate to={'/articles/new'}/>
    }

    return (
        responseGetArticle &&
        <ArticleForm
            onSubmit={handleSubmit}
            errors={(errorUpdateArticle && errorUpdateArticle.errors) || {}}
            initialValues={initialValues}
            isLoading={isLoadingGetArticle}
        />
    )
}

export default EditArticle;